// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String?
  lastName      String?
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  otps          OTP[]
  videos        Video[]
}

model OTP {
  id        String   @id @default(uuid())
  code      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  type      OTPType  @default(VERIFICATION)

  @@index([userId])
}

enum OTPType {
  VERIFICATION
  PASSWORD_RESET
}

model Video {
  id              String    @id @default(uuid())
  title           String
  description     String?
  fileName        String
  fileKey         String    @unique // S3 object key
  fileUrl         String?   // Generated presigned URL or public URL
  fileSize        Int       // Size in bytes
  duration        Int?      // Duration in seconds
  status          VideoStatus @default(PENDING)
  thumbnailUrl    String?
  mimeType        String
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  processingError String?
  isPublic        Boolean   @default(false)
  summary         VideoSummary?

  @@index([userId])
  @@index([status])
}

model VideoSummary {
  id              String    @id @default(uuid())
  videoId         String    @unique
  video           Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  summaryText     String
  keyPoints       String[]
  transcriptUrl   String?   // URL to transcript file in S3
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([videoId])
}

enum VideoStatus {
  PENDING      // Initial upload
  UPLOADING    // Currently uploading
  PROCESSING   // Video being processed
  READY        // Ready to view
  FAILED       // Processing failed
  DELETED      // Soft deleted
}
